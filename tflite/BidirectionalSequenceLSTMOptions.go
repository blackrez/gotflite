// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package tflite

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type BidirectionalSequenceLSTMOptions struct {
	_tab flatbuffers.Table
}

func GetRootAsBidirectionalSequenceLSTMOptions(buf []byte, offset flatbuffers.UOffsetT) *BidirectionalSequenceLSTMOptions {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &BidirectionalSequenceLSTMOptions{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *BidirectionalSequenceLSTMOptions) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *BidirectionalSequenceLSTMOptions) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *BidirectionalSequenceLSTMOptions) FusedActivationFunction() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BidirectionalSequenceLSTMOptions) MutateFusedActivationFunction(n int8) bool {
	return rcv._tab.MutateInt8Slot(4, n)
}

func (rcv *BidirectionalSequenceLSTMOptions) CellClip() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *BidirectionalSequenceLSTMOptions) MutateCellClip(n float32) bool {
	return rcv._tab.MutateFloat32Slot(6, n)
}

func (rcv *BidirectionalSequenceLSTMOptions) ProjClip() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *BidirectionalSequenceLSTMOptions) MutateProjClip(n float32) bool {
	return rcv._tab.MutateFloat32Slot(8, n)
}

func (rcv *BidirectionalSequenceLSTMOptions) MergeOutputs() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BidirectionalSequenceLSTMOptions) MutateMergeOutputs(n byte) bool {
	return rcv._tab.MutateByteSlot(10, n)
}

func (rcv *BidirectionalSequenceLSTMOptions) TimeMajor() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 1
}

func (rcv *BidirectionalSequenceLSTMOptions) MutateTimeMajor(n byte) bool {
	return rcv._tab.MutateByteSlot(12, n)
}

func BidirectionalSequenceLSTMOptionsStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func BidirectionalSequenceLSTMOptionsAddFusedActivationFunction(builder *flatbuffers.Builder, fusedActivationFunction int8) {
	builder.PrependInt8Slot(0, fusedActivationFunction, 0)
}
func BidirectionalSequenceLSTMOptionsAddCellClip(builder *flatbuffers.Builder, cellClip float32) {
	builder.PrependFloat32Slot(1, cellClip, 0.0)
}
func BidirectionalSequenceLSTMOptionsAddProjClip(builder *flatbuffers.Builder, projClip float32) {
	builder.PrependFloat32Slot(2, projClip, 0.0)
}
func BidirectionalSequenceLSTMOptionsAddMergeOutputs(builder *flatbuffers.Builder, mergeOutputs byte) {
	builder.PrependByteSlot(3, mergeOutputs, 0)
}
func BidirectionalSequenceLSTMOptionsAddTimeMajor(builder *flatbuffers.Builder, timeMajor byte) {
	builder.PrependByteSlot(4, timeMajor, 1)
}
func BidirectionalSequenceLSTMOptionsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
