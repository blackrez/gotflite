// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package tflite

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type LSTMOptions struct {
	_tab flatbuffers.Table
}

func GetRootAsLSTMOptions(buf []byte, offset flatbuffers.UOffsetT) *LSTMOptions {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &LSTMOptions{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *LSTMOptions) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *LSTMOptions) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *LSTMOptions) FusedActivationFunction() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *LSTMOptions) MutateFusedActivationFunction(n int8) bool {
	return rcv._tab.MutateInt8Slot(4, n)
}

func (rcv *LSTMOptions) CellClip() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *LSTMOptions) MutateCellClip(n float32) bool {
	return rcv._tab.MutateFloat32Slot(6, n)
}

func (rcv *LSTMOptions) ProjClip() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *LSTMOptions) MutateProjClip(n float32) bool {
	return rcv._tab.MutateFloat32Slot(8, n)
}

func (rcv *LSTMOptions) KernelType() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *LSTMOptions) MutateKernelType(n int8) bool {
	return rcv._tab.MutateInt8Slot(10, n)
}

func LSTMOptionsStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func LSTMOptionsAddFusedActivationFunction(builder *flatbuffers.Builder, fusedActivationFunction int8) {
	builder.PrependInt8Slot(0, fusedActivationFunction, 0)
}
func LSTMOptionsAddCellClip(builder *flatbuffers.Builder, cellClip float32) {
	builder.PrependFloat32Slot(1, cellClip, 0.0)
}
func LSTMOptionsAddProjClip(builder *flatbuffers.Builder, projClip float32) {
	builder.PrependFloat32Slot(2, projClip, 0.0)
}
func LSTMOptionsAddKernelType(builder *flatbuffers.Builder, kernelType int8) {
	builder.PrependInt8Slot(3, kernelType, 0)
}
func LSTMOptionsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
