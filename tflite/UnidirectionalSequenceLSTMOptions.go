// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package tflite

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type UnidirectionalSequenceLSTMOptions struct {
	_tab flatbuffers.Table
}

func GetRootAsUnidirectionalSequenceLSTMOptions(buf []byte, offset flatbuffers.UOffsetT) *UnidirectionalSequenceLSTMOptions {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &UnidirectionalSequenceLSTMOptions{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *UnidirectionalSequenceLSTMOptions) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *UnidirectionalSequenceLSTMOptions) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *UnidirectionalSequenceLSTMOptions) FusedActivationFunction() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *UnidirectionalSequenceLSTMOptions) MutateFusedActivationFunction(n int8) bool {
	return rcv._tab.MutateInt8Slot(4, n)
}

func (rcv *UnidirectionalSequenceLSTMOptions) CellClip() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *UnidirectionalSequenceLSTMOptions) MutateCellClip(n float32) bool {
	return rcv._tab.MutateFloat32Slot(6, n)
}

func (rcv *UnidirectionalSequenceLSTMOptions) ProjClip() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *UnidirectionalSequenceLSTMOptions) MutateProjClip(n float32) bool {
	return rcv._tab.MutateFloat32Slot(8, n)
}

func (rcv *UnidirectionalSequenceLSTMOptions) TimeMajor() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *UnidirectionalSequenceLSTMOptions) MutateTimeMajor(n byte) bool {
	return rcv._tab.MutateByteSlot(10, n)
}

func UnidirectionalSequenceLSTMOptionsStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func UnidirectionalSequenceLSTMOptionsAddFusedActivationFunction(builder *flatbuffers.Builder, fusedActivationFunction int8) {
	builder.PrependInt8Slot(0, fusedActivationFunction, 0)
}
func UnidirectionalSequenceLSTMOptionsAddCellClip(builder *flatbuffers.Builder, cellClip float32) {
	builder.PrependFloat32Slot(1, cellClip, 0.0)
}
func UnidirectionalSequenceLSTMOptionsAddProjClip(builder *flatbuffers.Builder, projClip float32) {
	builder.PrependFloat32Slot(2, projClip, 0.0)
}
func UnidirectionalSequenceLSTMOptionsAddTimeMajor(builder *flatbuffers.Builder, timeMajor byte) {
	builder.PrependByteSlot(3, timeMajor, 0)
}
func UnidirectionalSequenceLSTMOptionsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
